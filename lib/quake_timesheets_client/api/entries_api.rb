=begin
#TimesheetsApi (params in:body)

# <p>Another API description</p> 

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0

=end

require 'cgi'

module Quake::Timesheets
  class EntriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new Entry
    # @param [Hash] opts the optional parameters
    # @option opts [CreateEntriesInput] :create_entries_input 
    # @return [Entry]
    def create_entries(opts = {})
      data, _status_code, _headers = create_entries_with_http_info(opts)
      data
    end

    # Create a new Entry
    # @param [Hash] opts the optional parameters
    # @option opts [CreateEntriesInput] :create_entries_input 
    # @return [Array<(Entry, Integer, Hash)>] Entry data, response status code and response headers
    def create_entries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntriesApi.create_entries ...'
      end
      # resource path
      local_var_path = '/api/v1/entries'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_entries_input'] || opts[:body])

      # return_type
      return_type = opts[:debug_return_type] || 'Entry'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['authToken']

      new_options = opts.merge(
        :operation => :"EntriesApi.create_entries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntriesApi#create_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for entries matching filters
    # @param [Hash] opts the optional parameters
    # @option opts [String] :dataset_id Filter to the entries belonging to one of the identified datasets
    # @option opts [String] :person_id Filter to the entries belonging to one of the identified people
    # @option opts [String] :from_date Return only entries after this DateTime (inclusive)
    # @option opts [String] :to_date Return only entries before this DateTime (inclusive)
    # @return [Array<Entry>]
    def index_entries(opts = {})
      data, _status_code, _headers = index_entries_with_http_info(opts)
      data
    end

    # Search for entries matching filters
    # @param [Hash] opts the optional parameters
    # @option opts [String] :dataset_id Filter to the entries belonging to one of the identified datasets
    # @option opts [String] :person_id Filter to the entries belonging to one of the identified people
    # @option opts [String] :from_date Return only entries after this DateTime (inclusive)
    # @option opts [String] :to_date Return only entries before this DateTime (inclusive)
    # @return [Array<(Array<Entry>, Integer, Hash)>] Array<Entry> data, response status code and response headers
    def index_entries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntriesApi.index_entries ...'
      end
      # resource path
      local_var_path = '/api/v1/entries'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dataset_id'] = opts[:'dataset_id'] if !opts[:'dataset_id'].nil?
      query_params[:'person_id'] = opts[:'person_id'] if !opts[:'person_id'].nil?
      query_params[:'from_date'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'to_date'] = opts[:'to_date'] if !opts[:'to_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Entry>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['authToken']

      new_options = opts.merge(
        :operation => :"EntriesApi.index_entries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntriesApi#index_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing Entry
    # @param id [String] The ID for the Entry
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateEntriesInput] :update_entries_input 
    # @return [Entry]
    def update_entries(id, opts = {})
      data, _status_code, _headers = update_entries_with_http_info(id, opts)
      data
    end

    # Update an existing Entry
    # @param id [String] The ID for the Entry
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateEntriesInput] :update_entries_input 
    # @return [Array<(Entry, Integer, Hash)>] Entry data, response status code and response headers
    def update_entries_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntriesApi.update_entries ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EntriesApi.update_entries"
      end
      # resource path
      local_var_path = '/api/v1/entries/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_entries_input'] || opts[:body])

      # return_type
      return_type = opts[:debug_return_type] || 'Entry'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['authToken']

      new_options = opts.merge(
        :operation => :"EntriesApi.update_entries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntriesApi#update_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
